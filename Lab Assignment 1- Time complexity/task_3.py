# -*- coding: utf-8 -*-
"""task 3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OStrcRTODARumgXbVeV3maa5H_Tda60-
"""

#3
inp= open("/content/drive/MyDrive/Cse221 Lab /Lab assignment 1/input3.txt", "r")
out= open("/content/drive/MyDrive/Cse221 Lab /Lab assignment 1/output3.txt", "w")
num=inp.readline()
store= inp.readline()
array=store.split()
def bubbleSort(arr):
  flag=True
  for a in range(len(arr)-1):
    if int(arr[a]) < int(arr[a+1]):
      flag=True
    else:
      flag=False
      break
  if flag==True:  
      print("This array is sorted", file= out)
  else:
    for i in range(len(arr)-1):
      for j in range(len(arr)-i-1):
        if int(arr[j]) > int(arr[j+1]):
            arr[j], arr[j+1] = arr[j+1], arr[j]
  string=""
  for i in arr:
    string+= f"{i} "

  print(string, file=out)   

bubbleSort(array)

#In this code from line 8 to line 16 is the code for this bubble sort to ensure 
# it's best case senatio here. To begin with, in the best case senario, the given 
# array will be sorted. So, in order for a code to run in it's best  with that given 
# array, i ensured that the bubble sort checking method with two for loops only works 
# when given array is not already sorted. That implementation gave me the result for best case senario.